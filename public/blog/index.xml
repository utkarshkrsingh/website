<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Utkarsh Kumar Singh</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content in Blogs on Utkarsh Kumar Singh</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Jul 2024 23:22:45 +0530</lastBuildDate>
    
        <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>std::endl vs \n</title>
      <link>http://localhost:1313/blog/stdendl-vs-newline-character/</link>
      <pubDate>Fri, 19 Jul 2024 23:22:45 +0530</pubDate>
      
      <guid>http://localhost:1313/blog/stdendl-vs-newline-character/</guid>
      <description>&lt;p&gt;C++ offers multiple ways to insert newline in your output. You might encounter &lt;code&gt;std::endl&lt;/code&gt; and &lt;code&gt;&#39;\n&#39;&lt;/code&gt; used for this purpose. But are they exactly the same. While they appear to achieve identical results, there is a slight yet significant difference between the two!&lt;/p&gt;
&lt;p&gt;When we use &lt;code&gt;std::cout&lt;/code&gt; it sends the data to the console. However, that output is typically not sent to the console immediately. Instead, the requested output &amp;ldquo;gets in line&amp;rdquo;, and is stored in a region of memory set aside to collect such requests (called a buffer). Periodically, the buffer is flushed, meaning all of the data collected in the buffer is transferred to its destination (in this case, the console).&lt;/p&gt;
&lt;h2 id=&#34;stdendl-vs-n&#34;&gt;&lt;code&gt;std::endl&lt;/code&gt; vs &lt;code&gt;&#39;\n&#39;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Using &lt;code&gt;std::endl&lt;/code&gt; is often inefficient, as it actually does two jobs: it outpus a newline (moving the cursor to the next line of the console), and it flushes the buffer (which is slow). If we output multiple lines of text ending with &lt;code&gt;std::endl&lt;/code&gt;, we will get multiple flushes, which is slow and probably unnecessay.&lt;/p&gt;
&lt;p&gt;When we output text to the console, we rarely need to flush the buffer directly. The output system in C++ is meant to flush itself on a regular basis, and allowing it to do so is both easier and more efficient.&lt;/p&gt;
&lt;p&gt;To output a newline without flushing the output buffer, we use &lt;code&gt;\n&lt;/code&gt; (in single or double quotes), a special symbol that the compiler recognizes as a newline character. &lt;code&gt;\n&lt;/code&gt; moves the cursor to the next line of the console without causing a flush, resulting in better performance. &lt;code&gt;\n&lt;/code&gt; is also easier to type and can be inserted into existing double-quoted text.&lt;/p&gt;
</description>
      
      
    </item>
    
  </channel>
</rss>
